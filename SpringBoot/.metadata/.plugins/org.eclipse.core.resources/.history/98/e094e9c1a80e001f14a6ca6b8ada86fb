package com.example.learnspringaop.aopexample.aspects;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Configuration;

@Configuration
@Aspect
public class LoggingAspects {
	
	Logger logger = LoggerFactory.getLogger(getClass());
	
//	@Pointcut - when 
//	execution(* PACKAGE.*.*(..)
//	execution(* PACKAGE.CLASS.METHOD(..)
	@Before("execution(* com.example.learnspringaop.aopexample.*.*.*(..))")
	public void logMethodCallBefore(JoinPoint joinPoint) {
		logger.info("Before Aspect - method is called {}",joinPoint);
	}
	@After("execution(* com.example.learnspringaop.aopexample.*.*.*(..))")
	public void logMethodCallAfter(JoinPoint joinPoint) {
		logger.info("After Aspect - method is called {}",joinPoint);
	}
	
	@AfterReturning(
	pointcut="execution(* com.example.learnspringaop.aopexample.*.*.*(..))",
	returning="resultValue"
	)
	public void logMethodCallAfterReturn(JoinPoint joinPoint,Object resultValue) {
		logger.info("AfterReturning Aspect - {} is called with result: {}",joinPoint,resultValue);
	}
	
	@AfterThrowing(
	pointcut="execution(* com.example.learnspringaop.aopexample.*.*.*(..))",
	throwing="exception"
	)
	public void logMethodCallAfterThrowing(JoinPoint joinPoint,Object resultValue) {
		logger.info("AfterReturning Aspect - {} is called with result: {}",joinPoint,resultValue);
	}
}
