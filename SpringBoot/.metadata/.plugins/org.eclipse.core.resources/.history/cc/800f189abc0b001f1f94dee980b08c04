package com.in28minutes.learnspringsecurity.basic;

import static org.springframework.security.config.Customizer.withDefaults;

import javax.sql.DataSource;

import org.springframework.boot.autoconfigure.security.SecurityProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.annotation.Order;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.provisioning.JdbcUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class BasicAuthSecurityConfiguration {

//	@Bean
//	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
//	    http.authorizeHttpRequests(
//	            auth -> auth.anyRequest().authenticated()
//	    );
//	    http.sessionManagement(
//				session -> session.sessionCreationPolicy(
//						SessionCreationPolicy.STATELESS
//						)
//				);
//	    http.httpBasic(withDefaults());
//	    http.csrf(csrf -> csrf.disable());
//	    http.headers(header -> header.frameOptions(frameOptions -> frameOptions.disable()));
//	 
//	    return http.build();
//	}
	
	@Bean
	SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
		
		http.authorizeHttpRequests(
						auth -> {
							auth
							.anyRequest().authenticated();
						});
		
		http.sessionManagement(
						session -> 
							session.sessionCreationPolicy(
									SessionCreationPolicy.STATELESS)
						);
		
		//http.formLogin();
		http.httpBasic(withDefaults());

		http.csrf(csrf -> csrf.disable());

		//http.csrf(AbstractHttpConfigurer::disable);

		http.headers(headers -> headers.frameOptions(frameOptionsConfig-> frameOptionsConfig.disable()));

		// http.headers(headers -> headers.frameOptions(HeadersConfigurer.FrameOptionsConfig::disable));
		
		return http.build();
	}
//	@Bean
//	public UserDetailsService userDetailsService() {
//		var user = User.withUsername("user")
//				.password("{noop}dummy")
//				.roles(userRoles.USER.name())
//				.build();
//		
//		var admin = User.withUsername("admin")
//				.password("{noop}dummy")
//				.roles(userRoles.ADMIN.name())
//				.build();
//		
//		return new InMemoryUserDetailsManager(user,admin);
//	}
	
	public enum userRoles{
		USER,
		ADMIN
	}
	
	@Bean
	public DataSource dataSource() {
		return new EmbeddedDatabaseBuilder()
				.setType(EmbeddedDatabaseType.H2)
				.addScript(org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl.DEFAULT_USER_SCHEMA_DDL_LOCATION)
				.build();
	}
	
	@Bean
	public UserDetailsService userDetailsService(DataSource dataSource) {
		var user = User.withUsername("user")
				.password("{noop}dummy")
				.roles(userRoles.USER.name())
				.build();
		
		var admin = User.withUsername("admin")
				.password("{noop}dummy")
				.roles(userRoles.ADMIN.name())
				.build();
		var jdbcUserDetailsManager = new JdbcUserDetailsManager(dataSource);
		jdbcUserDetailsManager.createUser(user);
		jdbcUserDetailsManager.createUser(admin);
		
		return new InMemoryUserDetailsManager(user,admin);
	}
}
