package com.in28minutes.learnspringsecurity.basic;

import static org.springframework.security.config.Customizer.withDefaults;

import org.springframework.boot.autoconfigure.security.SecurityProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.core.annotation.Order;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

public class BasicAuthSecurityConfiguration {

	@Bean 
	SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {
		http.authorizeHttpRequests(
				(requests) -> requests.anyRequest().authenticated()
				);
//		http.formLogin(withDefaults());
		http.sessionManagement(
				session -> session.sessionCreationPolicy(
						SessionCreationPolicy.STATELESS
						)
				);
		http.httpBasic();
		http.csrf().disable();
		return http.build();
	}
	
	public UserDetailsService userDetailsService() {
		var user = User.withUsername("user")
				.password("{noop}dummy")
				.roles(userRoles.USER.name())
				.build();
		
		var admin = User.withUsername("user")
				.password("{noop}dummy")
				.roles(userRoles.ADMIN.name())
				.build();
		
		return new InMemoryUserDetailsManager(user);
	}
	
	public enum userRoles{
		USER,
		ADMIN
	}
}
